/* Standard includes. */
#include <stdio.h>
#include "main.h"
#include <altera_up_avalon_ps2.h>
#include <altera_up_ps2_keyboard.h>
#include "sys/alt_irq.h"
#include "io.h"
/* Scheduler includes. */
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/queue.h"

void ps2_isr(void* context, alt_u32 id){
	char ascii;
	int status = 0;
	unsigned char key = 0;
	KB_CODE_TYPE decode_mode;
	status = decode_scancode (context, &decode_mode , &key , &ascii) ;
	if ( status == 0 ) //success
	{
	// print out the result
		switch ( decode_mode )
		{
			case KB_ASCII_MAKE_CODE :
			printf ( "ASCII   : %c\n", ascii ) ;
			break ;
			case KB_LONG_BINARY_MAKE_CODE :
			// do nothing
			case KB_BINARY_MAKE_CODE :
			printf ( "MAKE CODE : %x\n", key ) ;
			break ;
			case KB_BREAK_CODE :
			// do nothing
			default :
			printf ( "DEFAULT   : %x\n", key ) ;
			break ;
		}
	}
}

void taskone(void *pvParameters){
	while(1){
		printf("nigga\n");
		vTaskDelay(1000);
	}
}

int main(void)
{
	// Create the tasks]
	printf("hello");
	alt_up_ps2_dev * ps2_device = alt_up_ps2_open_dev(PS2_NAME);
	if(ps2_device == NULL){
        printf("can't find PS/2 device\n");
        return 1;
    }
	// Finally start the scheduler. //

	alt_up_ps2_clear_fifo (ps2_device) ;
	xTaskCreate( taskone, "task1", configMINIMAL_STACK_SIZE, NULL, 1, NULL);

	vTaskStartScheduler();
	alt_irq_register(PS2_IRQ, ps2_device, ps2_isr);
	IOWR_8DIRECT(PS2_BASE,4,1);

	// Register interrupts

	/* Will only reach here if there is insufficient heap available to start
	 the scheduler. */
	while(1){}
}

void createTasks()
{

}

void startInterrupts()
{
	
}


